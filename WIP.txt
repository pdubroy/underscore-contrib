diff --git a/underscore.collections.walk.js b/underscore.collections.walk.js
index 13f2e67..a4042ab 100644
--- a/underscore.collections.walk.js
+++ b/underscore.collections.walk.js
@@ -24,9 +24,13 @@
   var notTreeError = 'Not a tree: same object found in two different branches';
 
   // Implements the default traversal strategy: if `obj` is a DOM node, walk
-  // its DOM children; otherwise, walk all the objects it references.
+  // its child DOM nodes; otherwise, walk all the objects it references.
   function defaultTraversal(obj) {
-    return _.isElement(obj) ? obj.children : obj;
+    return _.isElement(obj) ? obj.childNodes || obj.children : obj;
+  }
+
+  function isTextNode(value) {
+    return value && value.nodeType === 3;
   }
 
   // Walk the tree recursively beginning with `root`, calling `beforeFunc`
@@ -51,10 +55,12 @@
 
       var subResults;
       var target = traversalStrategy(value);
-      if (_.isObject(target) && !_.isEmpty(target)) {
+      if (_.isObject(target) && !_.isEmpty(target) && !isTextNode(target)) {
         // If collecting results from subtrees, collect them in the same shape
         // as the parent node.
-        if (collectResults) subResults = _.isArray(value) ? [] : {};
+        // XXX: Figure out what to do when a list of childNodes (HTMLCollection) or
+        // children (NodeList) is passed as the root.
+        if (collectResults) subResults = (_.isArray(target) || _.isElement(value)) ? [] : {};
 
         var stop = _.any(target, function(obj, key) {
           var result = _walk(obj, key, value);
@@ -166,6 +172,16 @@
         return visitor(subResults || leafMemo, value, key, parent);
       };
       return walkImpl(obj, this._traversalStrategy, null, reducer, context, true);
+    },
+
+    where: function(obj, properties, first) {
+      assert(!first); // Not handled yet!
+      return this[first ? 'find' : 'filter'](obj, this.preorder, function(value) {
+        for (var key in properties) {
+          if (properties[key] !== value[key]) return false;
+        }
+        return true;
+      });
     }
   };
 
